<?php

/**
 * @file
 * The Flag module.
 */

define('FLAG_API_VERSION', 3);

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\flag\Entity\Flag;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\UserInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function flag_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'flag.list':
      $output = '<p>' . t('This page lists all the <em>flags</em> that are currently defined on this system.') . '</p>';
      return $output;
    case 'flag.add_page':
      $output = '<p>' . t('Select the type of flag to create. An individual flag can only affect one type of object. This cannot be changed once the flag is created.') . '</p>';
      return $output;
    case 'field_ui.overview_flagging':
      // @todo: Doesn't make sense at the moment, implement when form
      // functionality is available.
      /*
      // Get the existing link types that provide a flagging form.
      $link_types = flag_get_link_types();
      $form_link_types = array();
      foreach (flag_get_link_types() as $link_type) {
        if ($link_type['provides form']) {
          $form_link_types[] = '<em>' . $link_type['title'] . '</em>';
        }
      }

      // Get the flag for which we're managing fields.
      $flag = menu_get_object('flag', FLAG_ADMIN_PATH_START + 1);

      // Common text.
      $output  = '<p>' . t('Flags can have fields added to them. For example, a "Spam" flag could have a <em>Reason</em> field where a user could type in why he believes the item flagged is spam. A "Bookmarks" flag could have a <em>Folder</em> field into which a user could arrange her bookmarks.') . '</p>';
      $output .= '<p>' . t('On this page you can add fields to flags, delete them, and otherwise manage them.') . '</p>';

      // Three cases:
      if ($flag->link_type == 'form') {
        // Case 1: the current link type is the flagging form. Don't tell the
        // user anything extra, all is fine.
      }
      elseif ($link_types[$flag->link_type]['provides form']) {
        // Case 2: the current link type shows the form for creation of the
        // flagging, but it not the flagging form. Tell the user they can't edit
        // existing flagging fields.
        $output .= t("Field values may be edited when flaggings are created because this flag's link type shows a form for the flagging. However, to edit field values on existing flaggings, you will need to set your flag to use the <em>Flagging form</em> link type. This is provided by the <em><a href='!flagging-form-url'>Flagging Form</a></em> module.", array(
          '!flagging-form-url' => 'http://drupal.org/project/flagging_form',
        ));
        if (!\Drupal::moduleHandler()->moduleExists('flagging_form')) {
          $output .= ' <span class="warning">'
            . t("You do not currently have this module enabled.")
            . '</span>';
        }
        $output .= '</p>';
      }
      else {
        // Case 3: the current link type does not allow access to the flagging
        // form. Tell the user they should change it.
        $output .= '<p class="warning">' . t("To allow users to enter values for fields you will need to <a href='!form-link-type-url'>set your flag</a> to use one of the following link types which allow users to access the flagging form: !link-types-list. (In case a form isn't used, the fields are assigned their default values.)", array(
          '!form-link-type-url' => url('admin/structure/flags/manage/' . $flag->name, array('fragment' => 'edit-link-type')),
          // The list of labels from link types. These are all defined in code
          // in hook_flag_link_type_info() and therefore safe to output raw.
          '!link-types-list' => implode(', ', $form_link_types),
        )) . '</p>';
        $output .= '<p>' . t("Additionally, to edit field values on existing flaggings, you will need to set your flag to use the Flagging form link type. This is provided by the <em><a href='!flagging-form-url'>Flagging Form</a></em> module.", array(
          '!flagging-form-url' => 'http://drupal.org/project/flagging_form',
        ));
        if (!\Drupal::moduleHandler()->moduleExists('flagging_form')) {
          $output .= ' <span class="warning">'
            . t("You do not currently have this module enabled.")
            . '</span>';
        }
        $output .= '</p>';
      }

      return $output;
      */
  }
}

/**
 * Implements hook_form_FORM_ID_alter(): user_admin_permissions().
 *
 * Disable permission on the permissions form that don't make sense for
 * anonymous users when Session API module is not enabled.
 */
/*function flag_form_user_admin_permissions_alter(&$form, FormStateInterface $form_state, $form_id) {
  @todo: Conditionally disable anon flagging permissions.
}*/

/**
 * Implements hook_entity_extra_field_info().
 */
function flag_entity_extra_field_info() {
  $extra = [];
  $flag_service = \Drupal::service('flag');
  $flags = $flag_service->getFlags();
  foreach ($flags as $flag) {
    // Skip flags that aren't on entities.
    $flag_type_plugin = $flag->getFlagTypePlugin();
    if (!($flag_type_plugin instanceof \Drupal\flag\Plugin\Flag\EntityFlagType)) {
      continue;
    }

    $flaggable_bundles = $flag->getApplicableBundles();

    foreach ($flaggable_bundles as $bundle_name) {
      if ($flag_type_plugin->showOnForm()) {
        $extra[$flag->getFlaggableEntityTypeId()][$bundle_name]['form']['flag'] = [
          'label' => t('Flags'),
          'description' => t('Checkboxes for toggling flags'),
          'weight' => 10,
        ];
      }

      if ($flag_type_plugin->showAsField()) {
        $extra[$flag->getFlaggableEntityTypeId()][$bundle_name]['display']['flag_' . $flag->id()] = [
          // It would be nicer to use % as the placeholder, but the label is
          // run through check_plain() by field_ui_display_overview_form()
          // (arguably incorrectly; see http://drupal.org/node/1991292).
          'label' => t('Flag: @title', [
            '@title' => $flag->label,
          ]),
          'description' => t('Individual flag link'),
          'weight' => 10,
        ];
      }
    }
  }

  return $extra;
}

/**
 * Implements hook_node_links_alter().
 */
function flag_node_links_alter(array &$links, NodeInterface $entity, array &$context) {
  //@todo: Define this for handling the showOnLinks() flag mode.
}

/**
 * Implements hook_entity_view().
 *
 * Handles the 'show_in_links' and 'show_as_field' flag options.
 */
function flag_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Don't show on previews.
  if ($entity->isNew()) {
    return;
  }

  $build['#cache']['contexts'][] = 'user.permissions';

  // Get all possible flags for this entity type.
  $flag_service = \Drupal::service('flag');
  $flags = $flag_service->getFlags($entity->getEntityTypeID(), $entity->bundle());

  foreach ($flags as $flag) {
    // Do not display the flag if disabled.
    if (!$flag->isEnabled()){
      continue;
    }

    $flag_type_plugin = $flag->getFlagTypePlugin();

    // Only add cache key if flag link is displayed.
    if ($flag_type_plugin->showAsField() && !$display->getComponent('flag_' . $flag->id())) {
      continue;
    }

    $build['flag_' . $flag->id()] = [
      '#lazy_builder' => ['flag.link_builder:build', [
        $entity->getEntityTypeId(),
        $entity->id(),
        $flag->id(),
      ]],
      '#create_placeholder' => TRUE,
    ];
  }
}

/**
 * Implements hook_entity_delete().
 */
function flag_entity_delete(EntityInterface $entity) {
  // Node and user flags handle things through the entity type delete hooks.
  // @todo: make this configurable in the flag type definition?
  if ($entity->getEntityTypeId() == 'node' || $entity->getEntityTypeId() == 'user') {
    return;
  }

  // @todo Actually delete the flaggings and clear associated flag counts.
}

/**
 * Implements hook_user_cancel().
 */
function flag_user_cancel($edit, $account, $method) {
  flag_user_account_removal($account);
}

/**
 * Implements hook_user_delete().
 */
function flag_user_delete(UserInterface $account) {
  flag_user_account_removal($account);
}

/**
 * Shared helper for user account cancellation or deletion.
 */
function flag_user_account_removal(UserInterface $account) {
  /** var \Drupal\flag\FlagServiceInterface $flag_service */
  $flag_service = \Drupal::service('flag');

  // Remove flags by this user.
  $flaggings = $flag_service->getFlaggings(NULL, NULL, $account);
  foreach ($flaggings as $flagging_id => $flagging) {
    if ($flaggable = $flagging->getFlaggable()) {
      $flag_service->unflag($flagging->getFlag(), $flaggable, $account);
    }
  }

  // Remove flags that have been done to this user.
  $flaggings = $flag_service->getFlaggings(NULL, $account);
  foreach ($flaggings as $flagging_id => $flagging) {
    if ($flaggable = $flagging->getFlaggable()) {
      $flag_service->unflag($flagging->getFlag(), $flaggable);
    }
  }
}

/**
 * Implements hook_flag_access().
 */
/*
// Commented out because it clashes with the core hook.
// TODO: see https://www.drupal.org/node/2584647.
function flag_flag_access($flag, $entity_id, $action, $account) {
  // Do nothing if there is no restriction by authorship.
  if (empty($flag->access_author)) {
    return;
  }

  // Restrict access by authorship. It's important that TRUE is never returned
  // here, otherwise we'd grant permission even if other modules denied access.
  if ($flag->getFlaggableEntityTypeId() == 'node') {
    // For non-existent nodes (such as on the node add form), assume that the
    // current user is creating the content.
    if (empty($entity_id) || !($node = $flag->fetch_entity($entity_id))) {
      return AccessResult::allowedIf($flag->access_author == 'others')->cacheUntilEntityChanges($flag);
    }

    if ($flag->access_author == 'own' && $node->uid != $account->uid) {
      return AccessResult::forbidden()->cacheUntilEntityChanges($flag);
    }
    elseif ($flag->access_author == 'others' && $node->uid == $account->uid) {
      return AccessResult::forbidden()->cacheUntilEntityChanges($flag);
    }
  }

  // Restrict access by comment authorship.
  if ($flag->getFlaggableEntityTypeId() == 'comment') {
    // For non-existent comments (such as on the comment add form), assume that
    // the current user is creating the content.
    if (empty($entity_id) || !($comment = $flag->fetch_entity($entity_id))) {
      return $flag->access_author == 'comment_others' ? AccessResult::forbidden()->cacheUntilEntityChanges($flag) : NULL;
    }

    $node = \Drupal::entityManager()->getStorage('node')->load($comment->nid);
    if ($flag->access_author == 'node_own' && $node->uid != $account->uid) {
      return AccessResult::forbidden()->cacheUntilEntityChanges($flag);
    }
    elseif ($flag->access_author == 'node_others' && $node->uid == $account->uid) {
      return AccessResult::forbidden()->cacheUntilEntityChanges($flag);
    }
    elseif ($flag->access_author == 'comment_own' && $comment->uid != $account->uid) {
      return AccessResult::forbidden()->cacheUntilEntityChanges($flag);
    }
    elseif ($flag->access_author == 'comment_others' && $comment->uid == $account->uid) {
      return AccessResult::forbidden()->cacheUntilEntityChanges($flag);
    }
  }
}
*/

/**
 * Implements hook_flag_access_multiple().
 */
function flag_flag_access_multiple($flag, $entity_ids, $account) {
  $access = array();

  // Do nothing if there is no restriction by authorship.
  if (empty($flag->access_author)) {
    return $access;
  }

  if ($flag->getFlaggableEntityTypeId() == 'node') {
    // Restrict access by authorship. This is similar to flag_flag_access()
    // above, but returns an array of 'nid' => $access values. Similarly, we
    // should never return TRUE in any of these access values, only FALSE if we
    // want to deny access, or use the current access value provided by Flag.
    $query = db_select('node', 'n')
      ->fields('n', array('nid', 'uid'))
      ->condition('nid', array_keys($entity_ids), 'IN');
    $bundles = $flag->getBundles();
    if (!empty($bundles)) {
      $query->condition('type', $bundles, 'IN');
    }
    $result = $query->execute();
    foreach ($result as $row) {
      if ($flag->access_author == 'own') {
        $access[$row->nid] = $row->uid != $account->uid ? FALSE : NULL;
      }
      elseif ($flag->access_author == 'others') {
        $access[$row->nid] = $row->uid == $account->uid ? FALSE : NULL;
      }
    }
  }

  if ($flag->getFlaggableEntityTypeId() == 'comment') {
    // Restrict access by comment ownership.
    $query = db_select('comment', 'c');
    $query->leftJoin('node', 'n', 'c.nid = n.nid');
    $query
      ->fields('c', array('cid', 'nid', 'uid'))
      ->condition('c.cid', $entity_ids, 'IN');
    $query->addField('c', 'uid', 'comment_uid');
    $result = $query->execute();

    foreach ($result as $row) {
      if ($flag->access_author == 'node_own') {
        $access[$row->cid] = $row->node_uid != $account->uid ? FALSE : NULL;
      }
      elseif ($flag->access_author == 'node_others') {
        $access[$row->cid] = $row->node_uid == $account->uid ? FALSE : NULL;
      }
      elseif ($flag->access_author == 'comment_own') {
        $access[$row->cid] = $row->comment_uid != $account->uid ? FALSE : NULL;
      }
      elseif ($flag->access_author == 'comment_others') {
        $access[$row->cid] = $row->comment_uid == $account->uid ? FALSE : NULL;
      }
    }
  }

  // Always return an array (even if empty) of accesses.
  return $access;
}

/**
 * Implements hook_entity_operation().
 */
function flag_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
  $operations = [];

  if ($entity instanceof \Drupal\flag\FlagInterface) {
    if (!$entity->isEnabled()) {
      $operations['enable'] = [
        'title' => t('Enable'),
        'url' => $entity->urlInfo('enable'),
        'weight' => 50,
      ];
    }
    else {
      $operations['disable'] = [
        'title' => t('Disable'),
        'url' => $entity->urlInfo('disable'),
        'weight' => 50,
      ];
    }

    $operations['reset'] = [
      'title' => t('Reset'),
      'url' => $entity->urlInfo('reset'),
      'weight' => 100,
    ];
  }

  return $operations;
}

/**
 * Implements hook_hook_info().
 *
 * Flag alter hooks should be defined in a MODULE.flag.inc file.
 */
function flag_hook_info() {
  $hooks = array();

  $hooks['flag_type_info_alter'] = array(
    'group' => 'flag',
  );
  $hooks['flag_link_type_info_alter'] = array(
    'group' => 'flag',
  );

  return $hooks;
}
